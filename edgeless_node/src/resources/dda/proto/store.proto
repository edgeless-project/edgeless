// SPDX-FileCopyrightText: Â© 2024 Siemens AG
// SPDX-License-Identifier: MIT

// Service definition of DDA local key-value storage API.

syntax = "proto3";

package dda.store.v1;

option java_package = "io.dda.store.v1";
option java_multiple_files = true;
option java_outer_classname = "DdaStoreProto";

// This gRPC service exposes the DDA local key-value storage API to gRPC
// clients.
service StoreService {

  // Get returns the Value of the given Key. If the Key's key field is not
  // present, the empty key is used for lookup. If the store does not contain
  // the given key, it returns a Value with a value field that is NOT explicitly
  // present.
  //
  // In application code, always use language-specific generated "hasKey"
  // methods to check for key existence in the store, instead of comparing
  // default values.
  //
  // If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
  // signaled.
  rpc Get(Key) returns (Value);

  // Set sets the value for the given KeyValue pair. It overwrites any previous
  // value for that key.
  //
  // If a value is not present, a gRPC error with status code INVALID_ARGUMENT
  // (3) is signaled. Otherwise, if the operation fails, a gRPC error with
  // status code UNAVAILABLE (14) is signaled.
  rpc Set(KeyValue) returns (Ack);

  // Delete deletes the value for the given Key.
  //
  // If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
  // signaled.
  rpc Delete(Key) returns (Ack);

  // DeleteAll deletes all key-value pairs in the store.
  //
  // If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
  // signaled.
  rpc DeleteAll(DeleteAllParams) returns (Ack);

  // DeletePrefix deletes all of the keys (and values) that start with the given
  // prefix. Key strings are ordered lexicographically by their underlying byte
  // representation, i.e. UTF-8 encoding.
  //
  // If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
  // signaled.
  rpc DeletePrefix(Key) returns (Ack);

  // DeleteRange deletes all of the keys (and values) in the right-open Range
  // [start,end) (inclusive on start, exclusive on end). Key strings are ordered
  // lexicographically by their underlying byte representation, i.e. UTF-8
  // encoding.
  //
  // If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
  // signaled.
  rpc DeleteRange(Range) returns (Ack);

  // ScanPrefix iterates over key-value pairs whose keys start with the given
  // prefix Key in key order. Key strings are ordered lexicographically by their
  // underlying byte representation, i.e. UTF-8 encoding.
  //
  // If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
  // signaled.
  //
  // It is not safe to invoke Set, Delete, DeleteAll, DeletePrefix, and
  // DeleteRange operations while receiving data from the stream as such calls
  // may block until the stream is closed. Instead, accumulate key-value pairs
  // and issue such operations after scanning is finished.
  rpc ScanPrefix(Key) returns (stream KeyValue);

  // ScanRange iterates over a given right-open Range of key-value pairs in key
  // order (inclusive on start, exclusive on end). Key strings are ordered
  // lexicographically by their underlying byte representation, i.e. UTF-8
  // encoding.
  //
  // For example, this function can be used to iterate over keys which represent
  // a time range with a sortable time encoding like RFC3339.
  //
  // If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
  // signaled.
  //
  // It is not safe to invoke Set, Delete, DeleteAll, DeletePrefix, and
  // DeleteRange operations while receiving data from the stream as such calls
  // may block until the stream is closed. Instead, accumulate key-value pairs
  // and issue such operations after scanning is finished.
  rpc ScanRange(Range) returns (stream KeyValue);
}

// Empty acknowledgement message.
message Ack {
}

// Key is a message defining the key of a key-value store operation.
message Key {
  // Full key or prefix of a key (required).
  string key = 1;
}

// Value is a message defining the value of a key-value store operation.
message Value {
  // Domain-specific binary value (optional for Get operations, required for Set
  // operations).
  //
  // Encoding and decoding of the transmitted binary value is left to the user
  // of the API interface. Any binary serialization format can be used.
  //
  // For Get operations this field is NOT explicitly present if the
  // corresponding key does not exist in the store. For Set and Scan operations
  // this field is ALWAYS explicitly present, even if it holds an empty byte
  // array. In application code, always use language-specific generated "hasKey"
  // methods to check for key presence in the store, instead of comparing
  // default values.
  optional bytes value = 1;
}

// KeyValue is a message defining a key-value pair used by Set and Scan
// operations.
message KeyValue {
  // Name of key (required).
  string key = 1;

  // Domain-specific binary value (required).
  //
  // Encoding and decoding of the transmitted binary value is left to the user
  // of the API interface. Any binary serialization format can be used.
  bytes value = 2;
}

// Range is a message defining a right-open interval of keys, i.e. inclusive on
// the start key, exclusive on the end key.
message Range {
  // Inclusive start key (required).
  string start = 1;

  // Exclusive end key (required).
  string end = 2;
}

// Empty input parameters for rpc DeleteAll.
message DeleteAllParams {
}
