// SPDX-FileCopyrightText: Â© 2024 Siemens AG
// SPDX-License-Identifier: MIT

// Service definition of DDA Communication API.

syntax = "proto3";

package dda.com.v1;

option java_package = "io.dda.com.v1";
option java_multiple_files = true;
option java_outer_classname = "DdaComProto";

// This gRPC service exposes the DDA communication API to gRPC clients.
service ComService {

  // Publish the given Event and receive an acknowledgement after event has been
  // transmitted by the DDA communication service. PublishEvent does not wait
  // for the event to be received by subscribing gRPC clients.
  //
  // If the given event cannot be transmitted, a gRPC error with status code
  // UNAVAILABLE (14) is signaled.
  rpc PublishEvent(Event) returns (Ack);

  // Subscribe for receiving Event messages that match the given
  // SubscriptionFilter.
  //
  // If the given subscription cannot be set up, a gRPC error with status code
  // UNAVAILABLE (14) is signaled. If an event cannot be transmitted to the gRPC
  // client, the stream is aborted with status code UNAVAILABLE (14).
  //
  // To stop receiving events, a gRPC client should cancel this server streaming
  // call or specify a deadline/timeout with this call from the very start.
  rpc SubscribeEvent(SubscriptionFilter) returns (stream Event);

  // Publish the given Action and receive ActionResult messages.
  //
  // If the given action cannot be transmitted, a gRPC error with status code
  // UNAVAILABLE (14) is signaled. If an action result cannot be transmitted to
  // the gRPC client, the stream is aborted.
  rpc PublishAction(Action) returns (stream ActionResult);

  // Subscribe for receiving Action messages sent by rpc PublishAction that
  // match the given SubscriptionFilter. Received Actions are augmented by an
  // opaque correlation id that must be passed to correlated action results.
  //
  // If the given subscription cannot be set up, a gRPC error with status code
  // UNAVAILABLE (14) is signaled. If an action cannot be transmitted to the
  // gRPC client, the stream is aborted.
  //
  // To stop receiving actions, a gRPC client should cancel this server
  // streaming call or specify a deadline/timeout with this call from the very
  // start.
  rpc SubscribeAction(SubscriptionFilter) returns (stream ActionCorrelated);

  // Publish the given action result correlated to an Action received by rpc
  // SubscribeAction and receive an acknowledgement after the result has been
  // transmitted by the DDA communication service.
  //
  // If the given correlation id is invalid, or if a final action result has
  // already been sent, a gRPC error with status code INVALID_ARGUMENT (3) is
  // signaled. If the action result cannot be transmitted by the DDA
  // communication service, a gRPC error with status code UNAVAILABLE (14) is
  // signaled.
  rpc PublishActionResult(ActionResultCorrelated) returns (Ack);

  // Publish the given Query and receive QueryResult messages.
  //
  // If the given query cannot be transmitted, a gRPC error with status code
  // UNAVAILABLE (14) is signaled. If a query result cannot be transmitted to
  // the gRPC client, the stream is aborted.
  rpc PublishQuery(Query) returns (stream QueryResult);

  // Subscribe for receiving Query messages sent by rpc PublishQuery that match
  // the given SubscriptionFilter. Received Queries are augmented by an opaque
  // correlation id that must be passed to correlated query results.
  //
  // If the given subscription cannot be set up, a gRPC error with status code
  // UNAVAILABLE (14) is signaled. If a query cannot be transmitted to the gRPC
  // client, the stream is aborted.
  //
  // To stop receiving queries, a gRPC client should cancel this server
  // streaming call or specify a deadline/timeout with this call from the very
  // start.
  rpc SubscribeQuery(SubscriptionFilter) returns (stream QueryCorrelated);

  // Publish the given query result correlated to a Query received by rpc
  // SubscribeQuery and receive an acknowledgement after the result has been
  // transmitted by the DDA communication service.
  //
  // If the given correlation id is invalid, or if a final query result has
  // already been sent, a gRPC error with status code INVALID_ARGUMENT (3) is
  // signaled. If the query result cannot be transmitted by the DDA
  // communication service, a gRPC error with status code UNAVAILABLE (14) is
  // signaled.
  rpc PublishQueryResult(QueryResultCorrelated) returns (Ack);
}

// A SubscriptionFilter defines the context that determines which publications
// should be transmitted to a subscriber.
message SubscriptionFilter {

  // Type of Event, Action, or Query to be filtered (required).
  //
  // Must be a non-empty string consisting of lower-case ASCII letters ('a' to
  // 'z'), upper-case ASCII letters ('A' to 'Z'), ASCII digits ('0' to '9'),
  // ASCII dot ('.'), ASCII hyphen (-), or ASCII underscore (_).
  string type = 1;

  // Name to be used for a shared subscription (optional).
  //
  // A shared subscription is not routed to all subscribers specifying the
  // same Scope, Type, and Share, but only to one of these. Shared
  // subscriptions may be used to load balance published tasks so as to
  // distribute workload evenly among a set of subscribers. Another use case
  // is high availability through redundancy where a secondary subscribers
  // takes over published tasks if the primary subscriber is no longer
  // reachable (hot standby). Typically, shared subscriptions are used with
  // the Action pattern.
  //
  // A published Event, Action, or Query is matching a shared subscription
  // named Share if it provides the same Scope and Type. If multiple shared
  // subscriptions with different Share names but the same Scope and Type
  // match such a publication, it will be routed to one (and only one) in each
  // Share group.
  //
  // If non-empty, must consist of lower-case ASCII letters ('a' to 'z'),
  // upper-case ASCII letters ('A' to 'Z'), ASCII digits ('0' to '9'), ASCII
  // dot ('.'), ASCII hyphen (-), or ASCII underscore (_).
  //
  // If not present or an empty string, the related subscription is not
  // shared.
  string share = 2;
}

// Event is a message expressing an occurrence and its context. An event may
// occur due to a raised or observed signal, a state change, an elapsed timer,
// an observed or taken measurement, or any other announcement or activity. An
// Event is routed from an event producer (source) to interested event consumers
// using pub-sub messaging.
message Event {

  // Type of event related to the originating occurrence (required).
  //
  // Type is used as a subscription filter for routing the event to consumers
  // via pub-sub messaging. Must be a non-empty string consisting of
  // lower-case ASCII letters ('a' to 'z'), upper-case ASCII letters ('A' to
  // 'Z'), ASCII digits ('0' to '9'), ASCII dot ('.'), ASCII hyphen (-), or
  // ASCII underscore (_).
  //
  // Follow a consistent naming convention for types throughout an application
  // to avoid naming collisions. For example, Type could use Reverse Domain
  // Name Notation (com.mycompany.myapp.mytype) or some other hierarchical
  // naming pattern with some levels in the hierarchy separated by dots,
  // hyphens, or underscores.
  string type = 1;

  // Identifies the event (required).
  //
  // Id must be non-empty and unique within the scope of the producer.
  // Producers must ensure that (Source, Id) is unique for each distinct
  // event. Consumers may assume that events with identical Source and Id are
  // duplicates.
  //
  // Typically, Id is a UUID or a counter maintained by the producer.
  string id = 2;

  // Identifies the context in which the event occurred (required).
  //
  // An event source is defined by the event producer. Producers must ensure
  // that (Source, Id) is unique for each distinct event. Source must be
  // non-empty.
  //
  // Typically, Source may be a URI describing the organization publishing the
  // event or the process that generates the event.
  string source = 3;

  // Timestamp when the occurrence happened or when the event data has been
  // generated (optional).
  //
  // If present, must adhere to the format specified in [RFC 3339]. An empty
  // string value indicates that a timestamp is not available or needed.
  //
  // [RFC 3339]: https://www.rfc-editor.org/rfc/rfc3339
  string time = 4;

  // Domain-specific payload information about the occurrence (required).
  //
  // Encoding and decoding of the transmitted binary data is left to the user of
  // the API interface. Any binary serialization format can be used.
  bytes data = 5;

  // Content type of data value (optional).
  //
  // If present, it must adhere to the format specified in [RFC 2046]. An empty
  // string value indicates that a content type is implied by the application.
  //
  // [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
  string data_content_type = 6;
}

// Empty acknowledgement message.
message Ack {
}

// Action is a structure expressing an action, command, or operation to be
// carried out by interested action consumers. An Action is routed from an
// action invoker to interested action consumers using pub-sub messaging.
message Action {
  // Type of action, command or operation to be performed (required).
  //
  // Type is used as a subscription filter for routing the action to consumers
  // via pub-sub messaging. Must be a non-empty string consisting of
  // lower-case ASCII letters ('a' to 'z'), upper-case ASCII letters ('A' to
  // 'Z'), ASCII digits ('0' to '9'), ASCII dot ('.'), ASCII hyphen (-), or
  // ASCII underscore (_).
  //
  // Follow a consistent naming convention for types throughout an application
  // to avoid naming collisions. For example, Type could use Reverse Domain
  // Name Notation (com.mycompany.myapp.mytype) or some other hierarchical
  // naming pattern with some levels in the hierarchy separated by dots,
  // hyphens, or underscores.
  string type = 1;

  // Identifies the action (required).
  //
  // Id must be non-empty and unique within the scope of the action invoker.
  // Invokers must ensure that (Source, Id) is unique for each distinct
  // action. Consumers may assume that actions with identical Source and Id
  // are duplicates.
  //
  // Typically, Id is a UUID or a counter maintained by the invoker.
  string id = 2;

  // Identifies the context in which the action is invoked (required).
  //
  // An action source is defined by the action invoker. Invokers must ensure
  // that (Source, Id) is unique for each distinct action. Source must be
  // non-empty.
  //
  // Typically, Source may be a URI describing the organization publishing the
  // action or the process that invokes the action.
  string source = 3;

  // Parameter data of the action (optional).
  //
  // Encoding and decoding of the transmitted binary data is left to the user of
  // the API interface. Any binary serialization format can be used.
  bytes params = 4;

  // Content type of params value (optional).
  //
  // If present, it must adhere to the format specified in [RFC 2046]. An empty
  // string value indicates that a content type is implied by the application.
  //
  // [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
  string data_content_type = 5;
}

// ActionResult is a structure containing resulting information returned to the
// invoker of an Action. Each interested action consumer may transmit its own
// action result(s) independently of the others. Multiple ActionResults over
// time may be generated by a consumer for a single Action to transmit
// progressive series of results.
message ActionResult {
  // Identifies the context, in which the action is executed (required).
  //
  // Typically, Context may be a URI describing the organization consuming the
  // action or the process that carries out the action.
  string context = 1;

  // Resulting data to be returned to the action invoker (required).
  //
  // Note that errors occurring while processing an action must also be encoded
  // as result data in an application-specific way.
  //
  // Encoding and decoding of the transmitted binary data is left to the user of
  // the API interface. Any binary serialization format can be used.
  bytes data = 2;

  // Content type of data value (optional).
  //
  // If present, it must adhere to the format specified in [RFC 2046]. An empty
  // string value indicates that a content type is implied by the application.
  //
  // [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
  string data_content_type = 3;

  // The sequence number of a multi-result response (required for progressive
  // responses only).
  //
  // A zero value or -1 indicates a single result. If multiple ActionResults
  // are to be returned, the sequence number is 1 for the first result and
  // incremented by one with each newly generated result. If sequence number
  // overflows its maximum value 9223372036854775807, the next value should
  // revert to 1. A final result should be indicated by using the additive
  // inverse of the generated sequence number.
  //
  // A zero or negative sequence number indicates that no more results will be
  // published for the correlated action after the given one.
  int64 sequence_number = 4;
}

// An Action with a correlation id used to correlate action results.
message ActionCorrelated {
  // Original action.
  Action action = 1;

  // An opaque ID generated by this service to correlate an ActionResult with an
  // Action.
  //
  // Each received Action is augmented with a unique correlation ID by this
  // service before being transmitted to a subscriber. A subscriber must include
  // this field in all associated ActionResultCorrelated messages.
  string correlation_id = 2;
}

// An ActionResult with a correlation id used to correlate the corresponding
// action.
message ActionResultCorrelated {
  // Original action result.
  ActionResult result = 1;

  // An opaque ID generated by this service to correlate an ActionResult with an
  // Action (required).
  //
  // Each received Action is augmented with a unique correlation ID by this
  // service before being transmitted to a subscriber. A subscriber must include
  // this field in all associated ActionResultCorrelated messages.
  string correlation_id = 2;
}

// Query is a structure expressing a query to be answered by interested query
// consumers. A Query is routed from a querier to interested query consumers
// using pub-sub messaging.
message Query {
  // Type of query indicating intent or desired result (required).
  //
  // Type is used as a subscription filter for routing the query to consumers
  // via pub-sub messaging. Must be a non-empty string consisting of
  // lower-case ASCII letters ('a' to 'z'), upper-case ASCII letters ('A' to
  // 'Z'), ASCII digits ('0' to '9'), ASCII dot ('.'), ASCII hyphen (-), or
  // ASCII underscore (_).
  //
  // Follow a consistent naming convention for types throughout an application
  // to avoid naming collisions. For example, Type could use Reverse Domain
  // Name Notation (com.mycompany.myapp.mytype) or some other hierarchical
  // naming pattern with some levels in the hierarchy separated by dots,
  // hyphens, or underscores.
  string type = 1;

  // Identifies the query (required).
  //
  // Id must be non-empty and unique within the scope of the querier. Queriers
  // must ensure that (Source, Id) is unique for each distinct query.
  // Consumers may assume that queries with identical Source and Id are
  // duplicates.
  //
  // Typically, Id is a UUID or a counter maintained by the querier.
  string id = 2;

  // Identifies the context in which the query is posed (required).
  //
  // A query source is defined by the querier. Queriers must ensure that
  // (Source, Id) is unique for each distinct query. Source must be non-empty.
  //
  // Typically, Source may be a URI describing the organization publishing the
  // query or the process that poses the query.
  string source = 3;

  // Query data represented as indicated by query format (required).
  //
  // Encoding and decoding of the transmitted binary data is left to the user of
  // the API interface. Any binary serialization format can be used.
  bytes data = 4;

  // Content type of data value (optional).
  //
  // If present, it must adhere to the format specified in [RFC 2046]. An empty
  // string value indicates that a content type is implied by the application.
  //
  // The context type should represent the query language/format. For example, a
  // GraphQL query should use "application/graphql" and a SPARQL query should
  // use "application/sparql-query".
  //
  // [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
  string data_content_type = 5;
}

// QueryResult is a structure containing resulting information returned to the
// querier. Each interested query consumer may transmit its own query result(s)
// independently of the others. Multiple QueryResults over time may be generated
// by a consumer for a single Query to transmit live query results whenever the
// query yields new results due to update operations on the database.
message QueryResult {
  // Identifies the context, in which the query is executed (required).
  //
  // Typically, Context may be a URI describing the organization consuming the
  // query or the process that retrieves query result data.
  string context = 1;

  // Query result data represented as indicated by query format (required).
  bytes data = 2;

  // Content type of data value (optional).
  //
  // If present, it must adhere to the format specified in [RFC 2046]. An empty
  // string value indicates that a content type is implied by the application.
  //
  // If present, use MIME Content Types to specify the query result format. For
  // example, use "application/sql" for a SQL query result,
  // "application/graphql" for a GraphQL query result,
  // "application/sparql-results+json" for a SPARQL query result encoded in
  // JSON.
  //
  // [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
  string data_content_type = 3;

  // The sequence number of a multi-result live query (required for live query
  // responses only).
  //
  // A zero value or -1 indicates a single result. If multiple QueryResults
  // are to be returned, the sequence number is 1 for the first result and
  // incremented by one with each newly generated result. If sequence number
  // overflows its maximum value 9223372036854775807, the next value should
  // revert to 1. A final result should be indicated by using the additive
  // inverse of the generated sequence number.
  //
  // A zero or negative sequence number indicates that no more results will be
  // published for the correlated action after the given one.
  int64 sequence_number = 4;
}

// A Query with a correlation id used to correlate query results.
message QueryCorrelated {
  // Original query.
  Query query = 1;

  // An opaque ID generated by this service to correlate a QueryResult with a
  // Query.
  //
  // Each received Query is augmented with a unique correlation ID by this
  // service before being transmitted to a subscriber. A subscriber must include
  // this field in all associated QueryResultCorrelated messages.
  string correlation_id = 2;
}

// A QueryResult with a correlation id used to correlate the corresponding
// query.
message QueryResultCorrelated {
  // Original query result.
  QueryResult result = 1;

  // An opaque ID generated by this service to correlate a QueryResult with a
  // Query (required).
  //
  // Each received Query is augmented with a unique correlation ID by this
  // service before being transmitted to a subscriber. A subscriber must include
  // this field in all associated QueryResultCorrelated messages.
  string correlation_id = 2;
}
