syntax = "proto3";

package edgeless_api;

// Function instance identifier.
message InstanceId {
    // Unique identifier of the node that hosts this instance.
    string node_id = 1;
    // Unique identifier of the function.
    string function_id = 2;
}

// Consistency model of state.
enum StatePolicy {
   TRANSIENT = 0;
   NODE_LOCAL = 1;
   GLOBAL = 2;
}

// State specification.
message StateSpecification {
    // Unique identifier of the state.
    string state_id = 1;
    // Consistency model.
    StatePolicy policy = 2;
}

// Message defining the function class specification.
message FunctionClassSpecification {
    // Identifier of the function class.
    string function_class_id  = 1;
    // Type of the class.
    string function_class_type = 2;
    // Version of the class.
    string function_class_version = 3;
    // If present, it carries the function's code.
    optional bytes function_class_inline_code = 4;
    // Callbacks that are invoked by the functions (in addition to return).
    repeated string outputs = 5;
}

// Message to request the creation a new function instance.
message SpawnFunctionRequest {
    // The function instance identifier.
    InstanceId instance_id = 1;
    // The function class specification.
    FunctionClassSpecification code = 2;
    // Mapping of the outputs to concrete function/resource instances.
    map<string, InstanceId> output_mapping = 3;
    // The set of annotations associated to this function instance.
    map<string, string> annotations = 5;
    // The state specification.
    StateSpecification state_specification = 6;
}

// Message to request the creation a new function instance.
message SpawnFunctionResponse {
    // If present it means that the request has been rejected.
    // In this case, other fields may not be present or contain meaningful data.
    optional ResponseError response_error = 1;

    // The identifier of the newly-spawned function instance, if accepted.
    optional InstanceId instance_id = 2;
}

// Message to request the update of a function instance.
message UpdateFunctionLinksRequest {
    // The function instance identifier.
    InstanceId instance_id = 1;
    // Mapping of the outputs to concrete function/resource instances.
    map<string, InstanceId> output_mapping = 3;
}

// Message definining a workflow resource.
message WorkflowResource {
    // Name of the resource, local to the workflow specification,
    string name = 1;
    // Resource type.
    string class_type = 2;
    // Mapping of the outputs to other functions/resources in the workflow.
    map<string, string> output_mapping = 3;
    // Configuration of the resource, which depends on the resource type.
    map<string, string> configurations = 4;
}

// Message defining a function within a workflow.
message WorkflowFunction {
    // Name of this function within the workflow.
    string name = 1;
    // Specification of the function.
    FunctionClassSpecification class_spec = 2;
    // Mapping of the outputs to other functions/resources in the workflow.
    map<string, string> output_mapping = 3;
    // Annotations associated to this function.
    map<string, string> annotations = 5;
}

// Message defining a request to create a new workflow.
message SpawnWorkflowRequest {
    // Identifier of the workflow.
    WorkflowId workflow_id = 1;
    // Chain of functions to be called. Cannot be empty.
    repeated WorkflowFunction workflow_functions = 2;
    // List of resources required by the workflow, if any.
    repeated WorkflowResource workflow_resources = 3;
    // Annotations associated to this workflow.
    map<string, string> annotations = 4;
}

// Response to a request to create a new workflow.
message SpawnWorkflowResponse {
    // If present it means that the request has been rejected.
    // In this case, other fields may not be present or contain meaningful data.
    optional ResponseError response_error = 1;

    // The status of the newly-created workflow, if request accepted.
    optional WorkflowInstanceStatus workflow_status = 2;
}

// Function instance mapping.
message WorkflowFunctionMapping {
    // Name of the function within the workflow.
    string name = 1;
    // Function instances implementing this function.
    repeated InstanceId instances = 2;
}

// Status of a workflow instance.
message WorkflowInstanceStatus {
    // Workflow identifier.
    WorkflowId workflow_id = 1;
    // List of function instance mappings.
    repeated WorkflowFunctionMapping functions = 2;
}

// Identifier of the workflow.
message WorkflowId {
    string workflow_id = 1;
}

// List of workflow instances.
message WorkflowInstanceList {
    repeated WorkflowInstanceStatus workflow_statuses = 1;
}

// Event types.
enum EventType {
    // Function invocation for which a return value is expected.
    CALL = 0;
    // Function invocation for which no return is expected.
    CAST = 1;
    // Return value of a function invocation, with data.
    CALL_RET = 2;
    // Return value of a function invocation, without any data.
    CALL_NO_RET = 3;
    // Error return type.
    ERR = 4;
}

// Data associated to an event.
message EventData {
    // Event type.
    EventType event_type = 1;
    // Payload.
    string payload = 2;
}

// Event.
message Event {
    // The function instance that is expected to handle the event (callee).
    InstanceId target = 1;
    // The function instance that generated the event (caller).
    InstanceId source = 2;
    // Ongoing transaction identifier.
    uint64 stream_id = 3;
    // Event data.
    EventData msg = 4;
}

// Resource provider specification.
message ResourceProviderSpecification {
    // Unique identifier of the resource provider.
    string provider_id = 1;
    // Type of the resource provided.
    string class_type = 2;
    // List of callbacks that can be invoked.
    repeated string outputs = 3;
}

// Resource instance specification.
message ResourceInstanceSpecification {
    // Unique identifier of the resource provider.
    string provider_id = 1;
    // Resource configuration (depends on the type).
    map<string, string> configuration = 2;
    // Mapping of the outputs to concrete function/resource instances.
    map<string, InstanceId> output_mapping = 3;
}

// Response to a request to create a new resource.
message SpawnResourceResponse {
    // If present it means that the request has been rejected.
    // In this case, other fields may not be present or contain meaningful data.
    optional ResponseError response_error = 1;

    // The status of the newly-created resource, if request accepted.
    optional InstanceId instance_id = 2;
}

// Message containing information provided as response to failed request.
// The fields are inspired from the "problem detail" responses:
//
// https://www.rfc-editor.org/rfc/rfc7807.txt
//
// Currently all the fields are human-readable, i.e., they are intended to
// be shown and processed by human operators. Further optional fields might be
// added in the future that contain binary representations of information
// intended for machine processing, instead.
message ResponseError {
    // A short, human-readable summary of the problem type.
    // It should not change from occurrence to occurrence of the error.
    string summary = 1;

    // A human-readable explanation specific to this occurrence of the problem.
    optional string detail = 2;
}

