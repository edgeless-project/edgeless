syntax = "proto3";

import "google/protobuf/empty.proto";
import "messages.proto";

package edgeless_api;

// API to manage the lifecycle of function instances (s07).
service FunctionInstance {
    // Start a new function instance.
    // Input: request containing the description of the function to create.
    // Output: the function instance identifier assigned, if accepted.
    // Implemented by: e-ORC, node.
    rpc Start (SpawnFunctionRequest) returns (SpawnFunctionResponse);
    
    // Stop a running function instance.
    // Input: the identifier of the function instance to tear down.
    // Output: none.
    // Implemented by: e-ORC, node.
    rpc Stop (InstanceId) returns (google.protobuf.Empty );

    // Update a running function instance by changing the mapping between the
    // callback declarations and function instances.
    // Input: the update mapping.
    // Output: none.
    // Implemented by: e-ORC, node.
    rpc UpdateLinks (UpdateFunctionLinksRequest) returns (google.protobuf.Empty);

    // Register a new node on an orchestrator or deregister an existing node.
    // Input: registration: identifier of the new node and agent/invocation URLs;
    // deregistration: identifier of the existing node to be deregistered.
    // Output: UpdateNodeResponse.
    // Implemented by: e-ORC.
    rpc UpdateNode (UpdateNodeRequest) returns (UpdateNodeResponse);

    // Update the dataplane of a node by adding/removing peers.
    // Input: the node identifier and invocation URL (only for add operations).
    // Output: none.
    // Implemented by: node.
    rpc UpdatePeers (UpdatePeersRequest) returns (google.protobuf.Empty);

    // Check if the component is still alive.
    // Input: none.
    // Output: health status information.
    // Implemented by: e-ORC, node.
    rpc KeepAlive (google.protobuf.Empty) returns (HealthStatus);
}

// API to manage the lifecycle of workflow instances (s04).
service WorkflowInstance {
    // Start a new workflow.
    // Input: request containing the description of the workflow to create.
    // Output: the status of workflow instance newly created, if accepted.
    rpc Start (SpawnWorkflowRequest) returns (SpawnWorkflowResponse);

    // Stop an active workflow.
    // Input: the identifier of the workflow to tear down.
    // Output: none.
    rpc Stop (WorkflowId) returns (google.protobuf.Empty);

    // List the active workflows or shows the status of a given active workflow.
    // Input: the identifier of the active workflow or a special value indicating all workflows.
    // Output: the list of status of the active workflow instances.
    rpc List (WorkflowId) returns (WorkflowInstanceList);
}

// API to handle events (s01).
service FunctionInvocation {
    // Handle an event.
    // Input: event to be handled.
    // Output: none.
    rpc Handle (Event) returns (google.protobuf.Empty); 
}

// API to handle the lifecycle of resources (s06).
service ResourceConfiguration {
    // Create a new resource.
    // Input: specification of the resource to be created.
    // Output: the identifier of the newly created resource, if accepted.
    rpc Start (ResourceInstanceSpecification) returns (SpawnResourceResponse);

    // Terminate an existing resource.
    // Input: the identifier of the resource to be terminated.
    // Output: none.
    rpc Stop (InstanceId) returns (google.protobuf.Empty);
}