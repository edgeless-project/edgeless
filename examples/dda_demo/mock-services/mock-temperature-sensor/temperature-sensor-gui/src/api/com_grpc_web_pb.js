/**
 * @fileoverview gRPC-Web generated client stub for dda.com.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: com.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.dda = {};
proto.dda.com = {};
proto.dda.com.v1 = require('./com_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dda.com.v1.ComServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dda.com.v1.ComServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dda.com.v1.Event,
 *   !proto.dda.com.v1.Ack>}
 */
const methodDescriptor_ComService_PublishEvent = new grpc.web.MethodDescriptor(
  '/dda.com.v1.ComService/PublishEvent',
  grpc.web.MethodType.UNARY,
  proto.dda.com.v1.Event,
  proto.dda.com.v1.Ack,
  /**
   * @param {!proto.dda.com.v1.Event} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dda.com.v1.Ack.deserializeBinary
);


/**
 * @param {!proto.dda.com.v1.Event} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dda.com.v1.Ack)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.Ack>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServiceClient.prototype.publishEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dda.com.v1.ComService/PublishEvent',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishEvent,
      callback);
};


/**
 * @param {!proto.dda.com.v1.Event} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dda.com.v1.Ack>}
 *     Promise that resolves to the response
 */
proto.dda.com.v1.ComServicePromiseClient.prototype.publishEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dda.com.v1.ComService/PublishEvent',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dda.com.v1.SubscriptionFilter,
 *   !proto.dda.com.v1.Event>}
 */
const methodDescriptor_ComService_SubscribeEvent = new grpc.web.MethodDescriptor(
  '/dda.com.v1.ComService/SubscribeEvent',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.dda.com.v1.SubscriptionFilter,
  proto.dda.com.v1.Event,
  /**
   * @param {!proto.dda.com.v1.SubscriptionFilter} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dda.com.v1.Event.deserializeBinary
);


/**
 * @param {!proto.dda.com.v1.SubscriptionFilter} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.Event>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServiceClient.prototype.subscribeEvent =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/SubscribeEvent',
      request,
      metadata || {},
      methodDescriptor_ComService_SubscribeEvent);
};


/**
 * @param {!proto.dda.com.v1.SubscriptionFilter} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.Event>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServicePromiseClient.prototype.subscribeEvent =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/SubscribeEvent',
      request,
      metadata || {},
      methodDescriptor_ComService_SubscribeEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dda.com.v1.Action,
 *   !proto.dda.com.v1.ActionResult>}
 */
const methodDescriptor_ComService_PublishAction = new grpc.web.MethodDescriptor(
  '/dda.com.v1.ComService/PublishAction',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.dda.com.v1.Action,
  proto.dda.com.v1.ActionResult,
  /**
   * @param {!proto.dda.com.v1.Action} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dda.com.v1.ActionResult.deserializeBinary
);


/**
 * @param {!proto.dda.com.v1.Action} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.ActionResult>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServiceClient.prototype.publishAction =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/PublishAction',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishAction);
};


/**
 * @param {!proto.dda.com.v1.Action} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.ActionResult>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServicePromiseClient.prototype.publishAction =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/PublishAction',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishAction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dda.com.v1.SubscriptionFilter,
 *   !proto.dda.com.v1.ActionCorrelated>}
 */
const methodDescriptor_ComService_SubscribeAction = new grpc.web.MethodDescriptor(
  '/dda.com.v1.ComService/SubscribeAction',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.dda.com.v1.SubscriptionFilter,
  proto.dda.com.v1.ActionCorrelated,
  /**
   * @param {!proto.dda.com.v1.SubscriptionFilter} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dda.com.v1.ActionCorrelated.deserializeBinary
);


/**
 * @param {!proto.dda.com.v1.SubscriptionFilter} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.ActionCorrelated>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServiceClient.prototype.subscribeAction =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/SubscribeAction',
      request,
      metadata || {},
      methodDescriptor_ComService_SubscribeAction);
};


/**
 * @param {!proto.dda.com.v1.SubscriptionFilter} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.ActionCorrelated>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServicePromiseClient.prototype.subscribeAction =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/SubscribeAction',
      request,
      metadata || {},
      methodDescriptor_ComService_SubscribeAction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dda.com.v1.ActionResultCorrelated,
 *   !proto.dda.com.v1.Ack>}
 */
const methodDescriptor_ComService_PublishActionResult = new grpc.web.MethodDescriptor(
  '/dda.com.v1.ComService/PublishActionResult',
  grpc.web.MethodType.UNARY,
  proto.dda.com.v1.ActionResultCorrelated,
  proto.dda.com.v1.Ack,
  /**
   * @param {!proto.dda.com.v1.ActionResultCorrelated} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dda.com.v1.Ack.deserializeBinary
);


/**
 * @param {!proto.dda.com.v1.ActionResultCorrelated} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dda.com.v1.Ack)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.Ack>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServiceClient.prototype.publishActionResult =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dda.com.v1.ComService/PublishActionResult',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishActionResult,
      callback);
};


/**
 * @param {!proto.dda.com.v1.ActionResultCorrelated} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dda.com.v1.Ack>}
 *     Promise that resolves to the response
 */
proto.dda.com.v1.ComServicePromiseClient.prototype.publishActionResult =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dda.com.v1.ComService/PublishActionResult',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishActionResult);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dda.com.v1.Query,
 *   !proto.dda.com.v1.QueryResult>}
 */
const methodDescriptor_ComService_PublishQuery = new grpc.web.MethodDescriptor(
  '/dda.com.v1.ComService/PublishQuery',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.dda.com.v1.Query,
  proto.dda.com.v1.QueryResult,
  /**
   * @param {!proto.dda.com.v1.Query} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dda.com.v1.QueryResult.deserializeBinary
);


/**
 * @param {!proto.dda.com.v1.Query} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.QueryResult>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServiceClient.prototype.publishQuery =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/PublishQuery',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishQuery);
};


/**
 * @param {!proto.dda.com.v1.Query} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.QueryResult>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServicePromiseClient.prototype.publishQuery =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/PublishQuery',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishQuery);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dda.com.v1.SubscriptionFilter,
 *   !proto.dda.com.v1.QueryCorrelated>}
 */
const methodDescriptor_ComService_SubscribeQuery = new grpc.web.MethodDescriptor(
  '/dda.com.v1.ComService/SubscribeQuery',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.dda.com.v1.SubscriptionFilter,
  proto.dda.com.v1.QueryCorrelated,
  /**
   * @param {!proto.dda.com.v1.SubscriptionFilter} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dda.com.v1.QueryCorrelated.deserializeBinary
);


/**
 * @param {!proto.dda.com.v1.SubscriptionFilter} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.QueryCorrelated>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServiceClient.prototype.subscribeQuery =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/SubscribeQuery',
      request,
      metadata || {},
      methodDescriptor_ComService_SubscribeQuery);
};


/**
 * @param {!proto.dda.com.v1.SubscriptionFilter} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.QueryCorrelated>}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServicePromiseClient.prototype.subscribeQuery =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dda.com.v1.ComService/SubscribeQuery',
      request,
      metadata || {},
      methodDescriptor_ComService_SubscribeQuery);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dda.com.v1.QueryResultCorrelated,
 *   !proto.dda.com.v1.Ack>}
 */
const methodDescriptor_ComService_PublishQueryResult = new grpc.web.MethodDescriptor(
  '/dda.com.v1.ComService/PublishQueryResult',
  grpc.web.MethodType.UNARY,
  proto.dda.com.v1.QueryResultCorrelated,
  proto.dda.com.v1.Ack,
  /**
   * @param {!proto.dda.com.v1.QueryResultCorrelated} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dda.com.v1.Ack.deserializeBinary
);


/**
 * @param {!proto.dda.com.v1.QueryResultCorrelated} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dda.com.v1.Ack)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dda.com.v1.Ack>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dda.com.v1.ComServiceClient.prototype.publishQueryResult =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dda.com.v1.ComService/PublishQueryResult',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishQueryResult,
      callback);
};


/**
 * @param {!proto.dda.com.v1.QueryResultCorrelated} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dda.com.v1.Ack>}
 *     Promise that resolves to the response
 */
proto.dda.com.v1.ComServicePromiseClient.prototype.publishQueryResult =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dda.com.v1.ComService/PublishQueryResult',
      request,
      metadata || {},
      methodDescriptor_ComService_PublishQueryResult);
};


module.exports = proto.dda.com.v1;

